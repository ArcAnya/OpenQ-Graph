# ----------------- TOKEN TRANSFER EVENTS (Deposit, Refund, and Payout) -----------------

type Deposit @entity {
	id: ID! # {bounty address}-{user address}-{token-address}-{receiveTime}
	tokenAddress: Bytes!
	symbol: Bytes!
	name: Bytes!
	value: BigInt!
	sender: User!
	bounty: Bounty!
	receiveTime: BigInt
	organization: Organization!
	tokenBalance: TokenBalance!
}

type Refund @entity {
	id: ID! # {bounty address}-{user address}-{token-address}-{refundTime}
	tokenAddress: Bytes!
	value: BigInt!
	sender: User!
	bounty: Bounty!
	refundTime: BigInt
	organization: Organization!
	tokenBalance: TokenBalance!
}

type Payout @entity {
	id: ID! # {bounty address}-{user address}-{token-address}-{payoutTime}
	tokenAddress: Bytes!
	value: BigInt!
	payoutTime: BigInt
	payoutAddress: User!
	bounty: Bounty!
	organization: Organization!
	tokenBalance: TokenBalance!
}

# ----------------- TOKEN BALANCE -----------------
# Total token balances for Token overall

# All deposits, refunds, and payouts that have ever happened for a token
type TokenBalance @entity {
	id: ID! # tokenAddress
	deposits: [Deposit!]! @derivedFrom(field: "tokenBalance")
	refunds: [Refund!]! @derivedFrom(field: "tokenBalance")
	payouts: [Payout!]! @derivedFrom(field: "tokenBalance")
}

# Incremented for each Deposit
# Decremented for each Refund
type FundedTokenBalance @entity {
	id: ID! #tokenAddress
	tokenAddress: Bytes!
	volume: BigInt!
}

# Incremented for each Payout
type PayoutTokenBalance @entity {
	id: ID! #tokenAddress
	tokenAddress: Bytes!
	volume: BigInt!
}

# ----------------- BOUNTY -----------------

type Bounty @entity {
	id: ID! # Bounty address hex string
	bountyId: String!
	bountyAddress: String!
	issuer: User!
	bountyMintTime: BigInt!
	bountyClosedTime: BigInt
	status: BountyStatus!
	payoutAddress: User
	organization: Organization!
	bountyTokenBalances: [BountyFundedTokenBalance!]! @derivedFrom(field: "bounty")
	deposits: [Deposit!]! @derivedFrom(field: "bounty")
	refunds: [Refund!]! @derivedFrom(field: "bounty")
	payouts: [Payout!]! @derivedFrom(field: "bounty")
}

enum BountyStatus {
  OPEN
	CLOSED
}

# Total token balances per Bounty per Token

# Incremented for each Deposit
# Decremented for each Refund
type BountyFundedTokenBalance @entity {
	id: ID! # bountyAddres-tokenAddress
	bounty: Bounty!
	tokenAddress: Bytes!
	volume: BigInt!
}

# ----------------- ORGANIZATION -----------------

type Organization @entity {
	id: ID!
	bountiesCreated: [Bounty!]! @derivedFrom(field: "organization")
	deposits: [Deposit!]! @derivedFrom(field: "organization")
	refunds: [Refund!]! @derivedFrom(field: "organization")
	payouts: [Payout!]! @derivedFrom(field: "organization")
	fundedTokenBalances: [OrganizationFundedTokenBalance!]! @derivedFrom(field: "organization")
	payoutTokenBalances: [OrganizationPayoutTokenBalance!]! @derivedFrom(field: "organization")
}

# Total token balances per Organization per Token

# Incremented for each Deposit
# Decremented for each Refund
type OrganizationFundedTokenBalance @entity {
	id: ID! # organizationId-tokenAddress
	organization: Organization!
	tokenAddress: Bytes!
	volume: BigInt!
}

# Incremented for each Payout
type OrganizationPayoutTokenBalance @entity {
	id: ID! # organizationId-tokenAddress
	organization: Organization!
	tokenAddress: Bytes!
	volume: BigInt!
}

# ----------------- USER -----------------

# User (Funder, Closer, Issuer)
type User @entity {
	id: ID! # User address hex string
	bountiesCreated: [Bounty!]! @derivedFrom(field: "issuer")
	bountiesClosed: [Bounty!]! @derivedFrom(field: "payoutAddress")
	deposits: [Deposit!]! @derivedFrom(field: "sender")
	refunds: [Refund!]! @derivedFrom(field: "sender")
	payouts: [Payout!]! @derivedFrom(field: "payoutAddress")
	payoutTokenBalances: [UserPayoutTokenBalance!]! @derivedFrom(field: "user")
	fundedTokenBalances: [UserFundedTokenBalance!]! @derivedFrom(field: "user")
}

# Total token balances per User per Token

# Incremented for each Deposit
# Decremented for each Refund
type UserFundedTokenBalance @entity {
	id: ID! # userAddress-tokenAddress
	user: User!
	tokenAddress: Bytes!
	volume: BigInt!
}

# Incremented for each Payout
type UserPayoutTokenBalance @entity {
	id: ID! # userAddress-tokenAddress
	user: User!
	tokenAddress: Bytes!
	volume: BigInt!
}
