// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IssueClosed extends ethereum.Event {
  get params(): IssueClosed__Params {
    return new IssueClosed__Params(this);
  }
}

export class IssueClosed__Params {
  _event: IssueClosed;

  constructor(event: IssueClosed) {
    this._event = event;
  }

  get id(): string {
    return this._event.parameters[0].value.toString();
  }

  get issueAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get payoutAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class IssueCreated extends ethereum.Event {
  get params(): IssueCreated__Params {
    return new IssueCreated__Params(this);
  }
}

export class IssueCreated__Params {
  _event: IssueCreated;

  constructor(event: IssueCreated) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): string {
    return this._event.parameters[1].value.toString();
  }

  get issueAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OpenQ extends ethereum.SmartContract {
  static bind(address: Address): OpenQ {
    return new OpenQ("OpenQ", address);
  }

  addressToIssue(param0: Address): string {
    let result = super.call(
      "addressToIssue",
      "addressToIssue(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toString();
  }

  try_addressToIssue(param0: Address): ethereum.CallResult<string> {
    let result = super.tryCall(
      "addressToIssue",
      "addressToIssue(address):(string)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getBountyAddress(_id: string): Address {
    let result = super.call(
      "getBountyAddress",
      "getBountyAddress(string):(address)",
      [ethereum.Value.fromString(_id)]
    );

    return result[0].toAddress();
  }

  try_getBountyAddress(_id: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getBountyAddress",
      "getBountyAddress(string):(address)",
      [ethereum.Value.fromString(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getIssueIds(): Array<string> {
    let result = super.call("getIssueIds", "getIssueIds():(string[])", []);

    return result[0].toStringArray();
  }

  try_getIssueIds(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall("getIssueIds", "getIssueIds():(string[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  issueIds(param0: BigInt): string {
    let result = super.call("issueIds", "issueIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toString();
  }

  try_issueIds(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("issueIds", "issueIds(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  issueIsOpen(id_: string): boolean {
    let result = super.call("issueIsOpen", "issueIsOpen(string):(bool)", [
      ethereum.Value.fromString(id_)
    ]);

    return result[0].toBoolean();
  }

  try_issueIsOpen(id_: string): ethereum.CallResult<boolean> {
    let result = super.tryCall("issueIsOpen", "issueIsOpen(string):(bool)", [
      ethereum.Value.fromString(id_)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issueToAddress(param0: string): Address {
    let result = super.call(
      "issueToAddress",
      "issueToAddress(string):(address)",
      [ethereum.Value.fromString(param0)]
    );

    return result[0].toAddress();
  }

  try_issueToAddress(param0: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "issueToAddress",
      "issueToAddress(string):(address)",
      [ethereum.Value.fromString(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintBounty(_id: string): Address {
    let result = super.call("mintBounty", "mintBounty(string):(address)", [
      ethereum.Value.fromString(_id)
    ]);

    return result[0].toAddress();
  }

  try_mintBounty(_id: string): ethereum.CallResult<Address> {
    let result = super.tryCall("mintBounty", "mintBounty(string):(address)", [
      ethereum.Value.fromString(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_tokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenAddresses",
      "tokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddTokenAddressCall extends ethereum.Call {
  get inputs(): AddTokenAddressCall__Inputs {
    return new AddTokenAddressCall__Inputs(this);
  }

  get outputs(): AddTokenAddressCall__Outputs {
    return new AddTokenAddressCall__Outputs(this);
  }
}

export class AddTokenAddressCall__Inputs {
  _call: AddTokenAddressCall;

  constructor(call: AddTokenAddressCall) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddTokenAddressCall__Outputs {
  _call: AddTokenAddressCall;

  constructor(call: AddTokenAddressCall) {
    this._call = call;
  }
}

export class ClaimBountyCall extends ethereum.Call {
  get inputs(): ClaimBountyCall__Inputs {
    return new ClaimBountyCall__Inputs(this);
  }

  get outputs(): ClaimBountyCall__Outputs {
    return new ClaimBountyCall__Outputs(this);
  }
}

export class ClaimBountyCall__Inputs {
  _call: ClaimBountyCall;

  constructor(call: ClaimBountyCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _payoutAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimBountyCall__Outputs {
  _call: ClaimBountyCall;

  constructor(call: ClaimBountyCall) {
    this._call = call;
  }
}

export class MintBountyCall extends ethereum.Call {
  get inputs(): MintBountyCall__Inputs {
    return new MintBountyCall__Inputs(this);
  }

  get outputs(): MintBountyCall__Outputs {
    return new MintBountyCall__Outputs(this);
  }
}

export class MintBountyCall__Inputs {
  _call: MintBountyCall;

  constructor(call: MintBountyCall) {
    this._call = call;
  }

  get _id(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class MintBountyCall__Outputs {
  _call: MintBountyCall;

  constructor(call: MintBountyCall) {
    this._call = call;
  }

  get issueAddress(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
